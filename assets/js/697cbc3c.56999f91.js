"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8885],{3917:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>p,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/\u7d22\u5f15\u4f18\u5148\u961f\u5217","title":"\u7d22\u5f15\u4f18\u5148\u961f\u5217","description":"\u521b\u5efa\u65f6\u95f4\uff1a2021\u5e7412\u670818\u65e5 10:30","source":"@site/docs/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/\u7d22\u5f15\u4f18\u5148\u961f\u5217.md","sourceDirName":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","slug":"/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/\u7d22\u5f15\u4f18\u5148\u961f\u5217","permalink":"/docs/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/\u7d22\u5f15\u4f18\u5148\u961f\u5217","draft":false,"unlisted":false,"editUrl":"https://github.com/hweos/git-pages/edit/main/docs/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/\u7d22\u5f15\u4f18\u5148\u961f\u5217.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"authors":"\u5434\u656c"},"sidebar":"docsSidebar","previous":{"title":"MacBook SSH \u914d\u7f6e\u6307\u5357","permalink":"/docs/\u6742\u9879/ssh-config"}}');var s=i(4848),r=i(8453);const p={sidebar_position:1,authors:"\u5434\u656c"},o="\u7d22\u5f15\u4f18\u5148\u961f\u5217",a={},d=[];function l(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"\u7d22\u5f15\u4f18\u5148\u961f\u5217",children:"\u7d22\u5f15\u4f18\u5148\u961f\u5217"})}),"\n",(0,s.jsx)("center",{children:"\u521b\u5efa\u65f6\u95f4\uff1a2021\u5e7412\u670818\u65e5 10:30"}),"\n",(0,s.jsxs)(e.p,{children:["\u7d22\u5f15\u4f18\u5148\u961f\u5217\u662f\u4e0d\u6539\u53d8\u6570\u636e\u7684\u63d2\u5165\u987a\u5e8f\uff0c\u4e5f\u5c31\u662f\u4e0d\u76f4\u63a5\u5728\u63d2\u5165\u7684\u6570\u7ec4 ",(0,s.jsx)(e.code,{children:"items"})," \u4e2d\u76f4\u63a5\u8fdb\u884c\u5806\u6392\u5e8f\uff0c\u800c\u662f\u4e13\u95e8\u7528\u4e00\u4e2a\u6570\u7ec4 ",(0,s.jsx)(e.code,{children:"pq"})," \u6765\u4fdd\u5b58\u5806\u6392\u5e8f\uff0c\u800c ",(0,s.jsx)(e.code,{children:"pq"})," \u6570\u7ec4\u91cc\u9762\u4fdd\u5b58\u7684\u503c\u662f ",(0,s.jsx)(e.code,{children:"items"})," \u6570\u7ec4\u91cc\u9762\u5bf9\u5e94\u503c\u7684\u4e0b\u6807\u3002\u5728\u8fdb\u884c\u5806\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u90fd\u662f\u76f4\u63a5\u64cd\u4f5c ",(0,s.jsx)(e.code,{children:"pq"})," \u6570\u7ec4\u3002\u7531\u4e8e\u5728\u63d2\u5165\u6216\u8005\u4fee\u6539\u7b49\u4e00\u4e9b\u64cd\u4f5c\u7684\u65f6\u5019\u90fd\u662f\u4f20\u5165\u7684\u662f\u63d2\u5165\u65f6\u7684\u4e0b\u6807\uff0c\u4e5f\u5c31\u662f ",(0,s.jsx)(e.code,{children:"items"})," \u7684\u4e0b\u6807\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u65b9\u4fbf\u5f97\u5230\u4e0b\u6807\u6240\u5bf9\u5e94\u503c\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5373\u4fbf\u6211\u4eec ",(0,s.jsx)(e.code,{children:"pq"})," \u6570\u7ec4\u4fdd\u5b58\u4e86\uff0c\u6bcf\u6b21\u627e\u90fd\u9700\u8981\u904d\u5386 ",(0,s.jsx)(e.code,{children:"pq"})," \u6570\u7ec4\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u518d\u65b0\u589e\u4e00\u4e2a\u6570\u7ec4 ",(0,s.jsx)(e.code,{children:"qp"})," \uff0c\u8fd9\u4e2a\u6570\u7ec4\u662f\u4fdd\u5b58\u63d2\u5165\u503c\u5728 ",(0,s.jsx)(e.code,{children:"pq"})," \u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f ",(0,s.jsx)(e.code,{children:"pq[qp[k]]"})," \u7b49\u4e8e ",(0,s.jsx)(e.code,{children:"k"})," \u5143\u7d20\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class IndexMinPQ<Item extends Comparable<Item>> {\n\n    Item[] items; // \u4fdd\u5b58\u771f\u6b63\u7684\u987a\u5e8f\uff0c\u91cc\u9762\u7684\u503c\u4e0d\u80fd\u53d1\u751f\u6539\u53d8\uff0c\u4fdd\u6301\u63d2\u5165\u987a\u5e8f\n    int[] pq; // \u4fdd\u5b58\u5806\u7684\u987a\u5e8f\n    int[] qp; // \u6839\u636e\u63d2\u5165\u4f4d\u7f6e\u627e\u5230 pq \u4e2d\u4fdd\u5b58\u7684\u503c pq[qp[key]] \u4ee3\u8868k\u5143\u7d20\u5bf9\u5e94\u5806\u4e2d\u7684\u4f4d\u7f6e\n    int n;\n    int maxN;\n\n    IndexMinPQ(int maxN) {\n        if (maxN < 0) throw new IllegalArgumentException();\n        items = (Item[]) new Comparable[maxN + 1];\n        pq = new int[maxN + 1];\n        qp = new int[maxN + 1];\n        // \u521d\u59cb\u5316\u6570\u636e\u90fd\u4e3a -1\n        Arrays.fill(qp, -1);\n        n = 0;\n        this.maxN = maxN;\n    }\n    void insert(int k, Item item) {\n        validateIndex(k);\n        // \u63d2\u5165\u5143\u7d20\u4e0d\u80fd\u63d2\u5165\u5230\u4e0d\u5b58\u5728\u7684\u4f4d\u7f6e\u4e2d\n        if (contains(k)) throw new IllegalArgumentException();\n        // \u7ef4\u62a4\u957f\u5ea6 n\n        n ++;\n        // \u76f4\u63a5\u8d4b\u503c\n        items[k] = item;\n        // \u5bf9\u5e94 qp \u6765\u8bf4\uff0c\u662f\u6839\u636e k \u6765\u4fdd\u5b58 pq \u7684\u503c\n        qp[k] = n;\n        // pq \u624d\u662f\u6309\u5806\u987a\u5e8f\uff0c\u521a\u63d2\u5165\u7684\u65f6\u5019\u76f4\u63a5\u653e\u5230\u6700\u540e\n        pq[n] = k;\n        // \u7136\u540e\u8fdb\u884c\u5192\u6ce1\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u4e0a\u6d6e\n        swim(n);\n    }\n    void change(int k, Item item) {\n        validateIndex(k);\n        // \u6539\u53d8\u503c\uff0c\u5982\u679c\u539f\u672c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\n        // \u4e5f\u5c31\u662f\u4e0d\u80fd\u4fee\u6539\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u503c\n        if (!contains(k)) throw new IllegalArgumentException();\n        // \u5982\u679c\u8fd9\u4e2a\u503c\u5b58\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u4fee\u6539\n        items[k] = item;\n        // \u5f97\u5230\u8981\u4fee\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\n        int i = qp[k];\n        // \u7531\u4e8e\u4fee\u6539\u7684\u503c\u6211\u4eec\u5e76\u4e0d\u6e05\u695a\u662f\u4e0b\u6c89\u8fd8\u662f\u4e0a\u6d6e\uff0c\u6240\u4ee5\u90fd\u9700\u8981\u8fdb\u884c\n        swim(i);\n        sink(i);\n    }\n    boolean contains(int k) {\n        validateIndex(k);\n        return qp[k] != -1;\n    }\n    void delete(int k) {\n        validateIndex(k);\n        /*\n          \u8fd9\u4e2a\u8ddf delMin \u4e0d\u540c\u7684\u662f\u6307\u5b9a\u4e86\u4e0b\u6807\uff0c\n          \u8fd9\u91cc\u4f20\u8fdb\u6765\u7684\u4e0b\u6807\u662f\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u5e76\u4e0d\u662f pq \u6570\u7ec4\u4e2d\u7684\n          \u4e0b\u6807\uff0c\u6240\u4ee5\u5220\u9664\u7684\u65f6\u5019\u76f4\u63a5\u7f6e\u4e3a null \u5373\u53ef\uff0c\u4e0d\u9700\u8981\n          \u7ecf\u8fc7 pq \u8f6c\u6362\u4e00\u6b21\uff0c\u4f46\u5bf9\u5e94\u4ea4\u6362\u6765\u8bf4\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u4ea4\u6362\n          pq \u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 qp \u6570\u7ec4\u6765\u83b7\u53d6\u5bf9\u5e94 pq\n          \u6570\u7ec4\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u8ddf\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\n         */\n        items[k] = null;\n        swapPQ(qp[k], n);\n        // \u7ef4\u62a4\u4e3a\u201c\u7a7a\u201d\n        qp[pq[n]] = -1;\n        pq[n] = 0;\n        // \u7ef4\u62a4\u957f\u5ea6\n        n--;\n        /*\n         \u5220\u9664\u4ee5\u540e\u9700\u8981\u8fdb\u884c\u4e0b\u6c89\u64cd\u4f5c\uff0c\u8ddf delMin \u76f8\u540c\uff0c\n         delMin \u4e2d\u662f\u7279\u6b8a\u7684 delete \u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528\u4e86\n         delete(pq[1]) \u3002\n         */\n        sink(pq[k]);\n    }\n    Item min() {\n        if (n == 0) throw new NoSuchElementException("Priority queue underflow");\n        return items[pq[1]];\n    }\n    int minIndex() {\n        if (n == 0) throw new NoSuchElementException("Priority queue underflow");\n        return pq[1];\n    }\n    int delMin() {\n        // \u62ff\u5230\u8981\u5220\u9664\u7684\u4e0b\u6807\n        int delIndex = minIndex();\n        // \u5c06\u8981\u5220\u9664\u7684\u4f4d\u7f6e\u7f6e\u4e3a null\n        // \u7531\u4e8e\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u5bf9\u5e94\u7684\u662f pq \u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u4e3a 1 \u7684\u90a3\u4e2a\n        // \u5bf9\u5e94\u7684 items \u4e2d\u7684\u503c\u3002pq \u662f\u4ece\u4e0b\u6807 1 \u5f00\u59cb\u8ba1\u7b97\u7684\n        items[pq[1]] = null;\n        // \u4ea4\u6362\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u548c\u7b2c\u4e00\u4e2a\u5143\u7d20\n        swapPQ(1, n);\n        // \u5c06\u5bf9\u5e94\u7684\u6570\u636e\u90fd\u8bbe\u7f6e\u6210\u201c\u7a7a\u201d\n        qp[pq[n]] = -1;\n        pq[n] = 0;\n        // \u7ef4\u62a4 n \u7684\u503c\n        n--;\n        // \u7531\u4e8e\u5220\u9664\u7684\u662f\u5806\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u4e0b\u6c89\u64cd\u4f5c\n        sink(1);\n        return delIndex;\n    }\n    boolean isEmpty() {\n        return n == 0;\n    }\n    int size() {\n        return n;\n    }\n\n    /**\n     * \u5192\u6ce1\uff0c\u4e5f\u5c31\u662f\u4e0a\u6d6e\uff0c\u9ed8\u8ba4\u5176\u4ed6\u8282\u70b9\u90fd\u6392\u597d\u5e8f\u4e86\n     * @param k \u4e5f\u505a\u4e0a\u6d6e\u7684\u8282\u70b9\uff0c pq \u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\n     */\n    void swim(int k) {\n        // \u5982\u679c\u5927\u4e8e 1 \u5e76\u4e14\u6bd4\u7236\u8282\u70b9\u5c0f\u624d\u8fdb\u884c\u4ea4\u6362\n        while (k > 1 && less(k, k/2)) {\n            swapPQ(k, k/2);\n            k /= 2;\n        }\n    }\n\n    /**\n     * \u5806\u4e0b\u6c89\n     * @param k \u8981\u4e0b\u6c89\u7684\u4e0b\u6807\uff0c\u8fd9\u91cc\u7684\u4e0b\u6807\u662f\u6570\u7ec4 pq \u4e2d\u7684\u4e0b\u6807\n     */\n    void sink(int k) {\n        while (k <= n) {\n            int min = k;\n            // \u7528\u5f53\u524d\u8282\u70b9\u8ddf\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4f5c\u6bd4\u8f83\uff0c\u9009\u51fa\u4e09\u4e2a\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\n            if (2 * k <= n && less(k * 2, min)) {\n                min = 2 * k;\n            }\n            if (2 * k + 1 < n && less(k * 2 + 1, min)) {\n                min = 2 * k + 1;\n            }\n            // \u5982\u679c\u6700\u5c0f\u7684\u5c31\u4ea4\u6362\n            if (k != min) {\n                swapPQ(k, min);\n                k = min;\n                continue;\n            }\n            break;\n        }\n    }\n\n    /**\n     * \u6bd4\u8f83 pq \u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u6240\u5bf9\u5e94\u7684 items \u91cc\u9762\u7684\u503c\n     * @param i pq \u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\n     * @param j pq \u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\n     * @return \u6240\u5bf9\u5e94\u7684 items \u91cc\u9762\u7684\u503c\u7684\u6bd4\u8f83\u7ed3\u679c\u662f\u5426\u662f\u5c0f\u4e8e\n     */\n    boolean less(int i, int j) {\n        return items[pq[i]].compareTo(items[pq[j]]) < 0;\n    }\n\n    /**\n     * \u4ea4\u6362 pq \u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n     * @param i pq \u6570\u7ec4\u4e2d\u4e00\u4e2a\u4e0b\u6807\n     * @param j pq \u6570\u7ec4\u4e2d\u53e6\u4e00\u4e2a\u4e0b\u6807\n     */\n    void swapPQ(int i, int j) {\n        int temp = pq[i];\n        pq[i] = pq[j];\n        pq[j] = temp;\n        // \u5bf9\u4e8e qp \u6765\u8bf4\u5c31\u662f\u4ee5\u503c\u4f5c\u4e3a\u4e0b\u6807\uff0c\u4ee5 pq \u7684\u4e0b\u6807\u4f5c\u4e3a\u503c\n        qp[pq[i]] = i;\n        qp[pq[j]] = j;\n    }\n\n    private void validateIndex(int i) {\n        if (i < 0) throw new IllegalArgumentException("index is negative: " + i);\n        if (i >= maxN) throw new IllegalArgumentException("index >= capacity: " + i);\n    }\n}\n\n'})})]})}function c(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>p,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function p(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:p(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);